{"version":3,"sources":["popup/Popupcard.jsx","popup/Editcard.jsx","components/Taskcard.jsx","components/TaskManager.jsx","App.js","reportWebVitals.js","index.js"],"names":["Popupcard","modal","toggle","savealltask","useState","name","setName","ability","setAbility","task","setTask","changehandler","event","target","value","Modal","isOpen","ModalHeader","ModalBody","action","class","for","type","id","placeholder","onChange","ModalFooter","Button","color","onClick","alltask","Editcard","updatetask","val","useEffect","fullname","abilityname","taskname","defltevent","preventDefault","updateobj","Taskcard","index","deletetask","updatelistarray","setModal","style","obj","TaskManager","alldetails","setAlldetails","strarr","localStorage","getItem","strobj","JSON","parse","templist","setItem","stringify","window","location","reload","delearr","splice","console","log","className","map","arraylist","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ef4ef37.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst Popupcard = ({modal , toggle , savealltask}) => {\r\n   \r\n     const [name , setName]=useState('')\r\n     const [ability , setAbility]=useState('')\r\n     const [task , setTask]=useState('')\r\n     \r\n    const changehandler =(event)=>{\r\n    const {name,value}=event.target\r\n    if(name===\"fullname\"){\r\n        setName(value)\r\n    }else if (name===\"abilityname\"){\r\n        setAbility(value)\r\n    }else if (name===\"taskname\"){\r\n        setTask(value)\r\n    }\r\n    }\r\n\r\n    const saverhandler=()=>{\r\n       \r\n        let alltask={}\r\n        alltask[\"fullname\"]=name\r\n        alltask[\"abilityname\"]=ability\r\n        alltask[\"taskname\"]=task\r\n        savealltask(alltask)\r\n        \r\n    \r\n    }\r\n    return (\r\n        <>\r\n        <Modal isOpen={modal} toggle={toggle} >\r\n        <ModalHeader toggle={toggle}>Create Your Task</ModalHeader>\r\n        <ModalBody>\r\n         <form action=\"\">\r\n         <div class=\"mb-3\">\r\n           <label for=\"exampleFormControlInput1\" class=\"form-label\"> Name</label>\r\n         <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Enter Your Name\" value={name} onChange={changehandler} name=\"fullname\"/>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">Ability</label>\r\n           <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"EX-Programing\"value={ability}  onChange={changehandler} name=\"abilityname\"/>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">Task</label>\r\n           <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"EX-Fix bug in App\" value={task}  onChange={changehandler} name=\"taskname\"/>\r\n          </div>\r\n         </form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={saverhandler}>Save Task</Button>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n        </Modal>\r\n\r\n        </>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default Popupcard;\r\n","import React, { useState , useEffect } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst Editcard = ({modal , toggle ,savealltask, updatetask,val}) => {\r\n   \r\n     const [name , setName]=useState('')\r\n     const [ability , setAbility]=useState('')\r\n     const [task , setTask]=useState('')\r\n     \r\n    const changehandler =(event)=>{\r\n    const {name,value}=event.target\r\n    if(name===\"fullname\"){\r\n        setName(value)\r\n    }else if (name===\"abilityname\"){\r\n        setAbility(value)\r\n    }else if (name===\"taskname\"){\r\n        setTask(value)\r\n    }\r\n    }\r\n\r\n   useEffect(() => {\r\n       \r\n      setName(val.fullname)\r\n      setAbility(val.abilityname)\r\n      setTask(val.taskname)\r\n\r\n\r\n   }, [])\r\n\r\n    const updatehandler=(defltevent)=>{\r\n       \r\n    defltevent.preventDefault();\r\n    let updateobj={}\r\n    updateobj[\"fullname\"]=name\r\n    updateobj[\"abilityname\"]=ability\r\n    updateobj[\"taskname\"]=task\r\n    updatetask(updateobj)\r\n    \r\n    }\r\n    return (\r\n        <>\r\n        <Modal isOpen={modal} toggle={toggle} >\r\n        <ModalHeader toggle={toggle}>Update Your Task</ModalHeader>\r\n        <ModalBody>\r\n         <form action=\"\">\r\n         <div class=\"mb-3\">\r\n           <label for=\"exampleFormControlInput1\" class=\"form-label\"> Name</label>\r\n         <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Enter Your Name\" value={name} onChange={changehandler} name=\"fullname\"/>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">Ability</label>\r\n           <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"EX-Programing\"value={ability}  onChange={changehandler} name=\"abilityname\"/>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n          <label for=\"exampleFormControlInput1\" class=\"form-label\">Task</label>\r\n           <input type=\"text\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"EX-Fix bug in App\" value={task}  onChange={changehandler} name=\"taskname\"/>\r\n          </div>\r\n         </form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={updatehandler}>Update the Task</Button>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n        </Modal>\r\n\r\n        </>\r\n            \r\n        \r\n    )\r\n}\r\n \r\nexport default Editcard;\r\n","import React, { useState } from 'react'\r\nimport Editcard from '../popup/Editcard'\r\n\r\n\r\n\r\n\r\nconst Taskcard = ({val, index,deletetask , updatelistarray}) => {\r\n\r\n    const [modal , setModal]=useState(false);\r\n  \r\n    const toggle=()=>{\r\n        setModal(!modal)\r\n    }\r\n  \r\n  \r\n   const updatetask=(obj)=>{\r\n\r\n    updatelistarray(obj , index)\r\n\r\n   }\r\n\r\n    const handleDelete =()=>{\r\n        deletetask(index)\r\n    }\r\n\r\n    return (\r\n        <div class = \"card-wrapper mr-4\">\r\n            <div class = \"card-top\" style={{\"background-color\": \"#f8cdda\"}}></div>\r\n            <div class = \"task-holder\">\r\n                <span class = \"card-header\" style={{\"background-color\": \"#ffffff\", \"border-radius\": \"10px\" , \"textTransform\":\"capitalize\"}}>  {val.fullname}</span>\r\n                <span class = \"card-header\" style={{\"background-color\": \"#dae2f8\", \"border-radius\": \"10px\",\"textTransform\":\"capitalize\"}}>{val.abilityname}</span>\r\n                <span class = \"card-header\" style={{\"background-color\": \"#CCCCB2\" , \"border-radius\": \"10px\",\"textTransform\":\"capitalize\"}}>{val.taskname}</span>\r\n                {/* <p className = \"mt-3\">{taskObj.Description}</p> */}\r\n\r\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"12px\"}}>\r\n                    <i class = \"far fa-edit mr-3\" style={{\"color\" :\"#a044ff\" , \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                    <i class=\"fas fa-trash-alt\" style = {{\"color\" : \"#00C9FF\", \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n                </div>\r\n        </div>\r\n        <Editcard modal = {modal} toggle = {toggle} updatetask = {updatetask} val = {val}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Taskcard;\r\n","import React ,{useState,useEffect}from 'react'\r\nimport Popupcard from '../popup/Popupcard'\r\nimport Taskcard from './Taskcard'\r\n\r\nconst TaskManager = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const toggle=()=> setModal(!modal)\r\n\r\n    const [alldetails ,setAlldetails]=useState([])\r\n\r\n    useEffect(() => {\r\n        let strarr=localStorage.getItem(\"localitems\")\r\n         if(strarr){\r\n             let strobj=JSON.parse(strarr)\r\n             setAlldetails(strobj)\r\n         }\r\n\r\n    }, [])\r\n\r\n\r\n     const updatelistarray=(obj , index)=>{\r\n   \r\n       let templist=alldetails\r\n       templist[index]=obj\r\n       localStorage.setItem(\"localitems\", JSON.stringify(templist))\r\n       setAlldetails(templist)\r\n       window.location.reload()\r\n\r\n\r\n\r\n     }\r\n\r\n     const deletetask=()=>{\r\n         let delearr=alldetails\r\n         delearr.splice(\"index\", 1)\r\n         localStorage.setItem(\"localitems\" ,JSON.stringify(delearr))\r\n         setAlldetails(delearr)\r\n         window.location.reload()\r\n     }\r\n\r\n     const savealltask=(alltask)=>{\r\n       let arraylist=alldetails\r\n       arraylist.push(alltask)\r\n       localStorage.setItem(\"localitems\" , JSON.stringify(arraylist))\r\n       setAlldetails(arraylist)\r\n       setModal(false)\r\n     }\r\n     console.log(alldetails)\r\n    return (\r\n        <>\r\n        <div className=\"Headerstyle text-center \">\r\n            <h3>Task Manager</h3>\r\n            <button className=\"btnstyle btn btn-primary mt-2\" onClick={()=>setModal(true)}>Create Task</button>\r\n        </div>\r\n        <div className=\"cardstyle\">\r\n          {\r\n                 alldetails.map((val , index)=>\r\n\r\n               <Taskcard  val={val} index={index} deletetask={deletetask} updatelistarray={updatelistarray}/>\r\n                )}\r\n               \r\n          \r\n        </div>\r\n        <Popupcard\r\n          toggle={toggle} modal={modal} savealltask={savealltask}\r\n\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskManager;\r\n ","import './App.css';\nimport TaskManager from './components/TaskManager';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n     <TaskManager/>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}